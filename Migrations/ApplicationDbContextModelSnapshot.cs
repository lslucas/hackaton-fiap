// <auto-generated />
using System;
using ConsultasMedicas.Data;
using ConsultasMedicas.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConsultasMedicas.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            modelBuilder.Entity<Appointment>(b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("Id");

                b.Property<DateTime>("Date")
                    .HasColumnType("datetime")
                    .HasColumnName("Date");

                b.Property<int>("DoctorId")
                    .HasColumnType("int")
                    .HasColumnName("DoctorId");

                b.Property<bool>("IsCancelled")
                    .HasColumnType("bit")
                    .HasColumnName("IsCancelled");

                b.Property<int>("PatientId")
                    .HasColumnType("int")
                    .HasColumnName("PatientId");

                b.HasKey("Id");

                b.HasIndex("DoctorId");

                b.HasIndex("PatientId");

                b.ToTable("Appointments");
            });

            modelBuilder.Entity<Doctor>(b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("Id");

                b.Property<string>("FullName")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("FullName");

                b.Property<string>("Specialization")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("Specialization");

                b.HasKey("Id");

                b.ToTable("Doctors");
            });

            modelBuilder.Entity<Notification>(b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("Id");

                b.Property<int>("AppointmentId")
                    .HasColumnType("int")
                    .HasColumnName("AppointmentId");

                b.Property<bool>("IsSent")
                    .HasColumnType("bit")
                    .HasColumnName("IsSent");

                b.Property<string>("Message")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("Message");

                b.Property<DateTime>("NotificationDate")
                    .HasColumnType("datetime")
                    .HasColumnName("NotificationDate");

                b.HasKey("Id");

                b.HasIndex("AppointmentId");

                b.ToTable("Notifications");
            });

            modelBuilder.Entity<Patient>(b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("Id");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("Email");

                b.Property<string>("FullName")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("FullName");

                b.Property<bool>("IsDeleted")
                    .HasColumnType("bit")
                    .HasColumnName("IsDeleted");

                b.Property<string>("Password")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasColumnName("Password");

                b.HasKey("Id");

                b.ToTable("Patients");
            });

            modelBuilder.Entity<Appointment>(b =>
            {
                b.HasOne<Doctor>("Doctor")
                    .WithMany("Appointments")
                    .HasForeignKey("DoctorId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne<Patient>("Patient")
                    .WithMany("Appointments")
                    .HasForeignKey("PatientId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Doctor");

                b.Navigation("Patient");
            });

            modelBuilder.Entity<Notification>(b =>
            {
                b.HasOne<Appointment>("Appointment")
                    .WithMany()
                    .HasForeignKey("AppointmentId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Appointment");
            });

            modelBuilder.Entity<Doctor>(b =>
            {
                b.Navigation("Appointments");
            });

            modelBuilder.Entity<Patient>(b =>
            {
                b.Navigation("Appointments");
            });
#pragma warning restore 612, 618
        }
    }
}

